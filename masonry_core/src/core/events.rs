// Copyright 2019 the Xilem Authors and the Druid Authors
// SPDX-License-Identifier: Apache-2.0

//! Events.

use ui_events::keyboard::{Code, Key, KeyState, KeyboardEvent};
use vello::kurbo::Rect;

use crate::dpi::PhysicalSize;
use crate::util::Duration;

// TODO - Occluded(bool) event
// TODO - winit ActivationTokenDone thing
// TODO - Suspended/Resume/NewEvents/MemoryWarning

/// A global event.
#[derive(Debug, Clone)]
pub enum WindowEvent {
    /// The window's DPI factor changed.
    Rescale(f64),
    /// The window was resized.
    Resize(PhysicalSize<u32>),
    /// The animation frame requested by this window must run.
    AnimFrame(Duration),
    /// The accessibility tree must be rebuilt.
    RebuildAccessTree,
}

// TODO - Clipboard Paste?
// TODO skip is_synthetic=true events
/// A text-related event.
#[derive(Debug, Clone)]
pub enum TextEvent {
    /// A keyboard event.
    Keyboard(KeyboardEvent),
    /// An IME event.
    Ime(Ime),
    /// The window took or lost focus.
    WindowFocusChange(bool),
}

// TODO - Go into more detail.
/// An accessibility event.
#[derive(Debug, Clone)]
pub struct AccessEvent {
    /// The action that was performed.
    pub action: accesskit::Action,
    /// The data associated with the action.
    pub data: Option<accesskit::ActionData>,
}

/// The light/dark mode of the window.
#[derive(Debug, Clone)]
pub enum WindowTheme {
    /// Light mode.
    Light,
    /// Dark mode.
    Dark,
}

// TODO - Rewrite that doc.
/// Changes to widget state.
///
/// Unlike [`PointerEvent`](ui_events::pointer::PointerEvent)s,
/// [`TextEvent`]s and [`AccessEvent`]s, [`Update`] events
/// are generated by Masonry, and may occur at different times during a given pass of
/// the event loop.
#[non_exhaustive]
#[derive(Debug, Clone)]
pub enum Update {
    /// Sent to a `Widget` when it is added to the widget tree. This should be
    /// the first message that each widget receives.
    ///
    /// Widgets should handle this event in order to do any initial setup.
    ///
    /// In addition to setup, this event is also used by the framework to
    /// track certain types of important widget state.
    ///
    /// ## Registering children
    ///
    /// Container widgets (widgets which use [`WidgetPod`](crate::core::WidgetPod) to
    /// manage children) must ensure that this event is forwarded to those children.
    /// The [`WidgetPod`](crate::core::WidgetPod) itself will handle registering those
    /// children with the system; this is required for things like correct routing
    /// of events.
    WidgetAdded,

    /// Called when the Disabled state of the widget is changed.
    ///
    /// To check if a widget is disabled, see [`is_disabled`].
    ///
    /// To change a widget's disabled state, see [`set_disabled`].
    ///
    /// [`is_disabled`]: crate::core::EventCtx::is_disabled
    /// [`set_disabled`]: crate::core::EventCtx::set_disabled
    DisabledChanged(bool),

    // TODO - Link to tutorial doc.
    /// Called when the Stashed state of the widget is changed.
    ///
    /// To check if a widget is stashed, see [`is_stashed`].
    ///
    /// To change a widget's stashed state, see [`set_stashed`].
    ///
    /// [`is_stashed`]: crate::core::EventCtx::is_stashed
    /// [`set_stashed`]: crate::core::EventCtx::set_stashed
    StashedChanged(bool),

    /// Called when a child widgets uses
    /// [`EventCtx::request_scroll_to_this`](crate::core::EventCtx::request_scroll_to_this).
    RequestPanToChild(Rect),

    /// Called when the [hovered] status of the current widget changes.
    ///
    /// [hovered]: crate::doc::doc_06_masonry_concepts#widget-status
    HoveredChanged(bool),

    /// Called when the [hovered] status of the current widget or a descendant changes.
    ///
    /// This is sent before [`Update::HoveredChanged`].
    ///
    /// [hovered]: crate::doc::doc_06_masonry_concepts#widget-status
    ChildHoveredChanged(bool),

    /// Called when the [focused] status of the current widget changes.
    ///
    /// [focused]: crate::doc::doc_06_masonry_concepts#text-focus
    FocusChanged(bool),

    /// Called when the [focused] status of the current widget or a descendant changes.
    ///
    /// This is sent before [`Update::FocusChanged`].
    ///
    /// [focused]: crate::doc::doc_06_masonry_concepts#text-focus
    ChildFocusChanged(bool),
}

impl TextEvent {
    /// Constructor for Keyboard events with [`KeyState::Down`].
    ///
    /// The key code will be marked as [`Code::Unidentified`].
    pub fn key_down(key: Key) -> Self {
        Self::Keyboard(KeyboardEvent {
            state: KeyState::Down,
            key,
            code: Code::Unidentified,
            ..Default::default()
        })
    }

    /// Constructor for Keyboard events with [`KeyState::Up`].
    ///
    /// The key code will be marked as [`Code::Unidentified`].
    pub fn key_up(key: Key) -> Self {
        Self::Keyboard(KeyboardEvent {
            state: KeyState::Up,
            key,
            code: Code::Unidentified,
            ..Default::default()
        })
    }

    /// Constructor for IME Preedit events.
    ///
    /// This is mostly useful for testing.
    pub fn preedit(text: String) -> Self {
        Self::Ime(Ime::Preedit(text, None))
    }

    /// Constructor for IME Preedit events.
    ///
    /// This is mostly useful for testing.
    ///
    /// **selected** is the part of the preedit text that should be selected.
    ///
    /// ## Panics
    ///
    /// If **selected** isn't a substring of **text**.
    pub fn preedit_with_cursor(text: String, selected: String) -> Self {
        let Some(offset) = text.find(&selected) else {
            panic!("Error building Preedit event: '{selected}' not found in '{text}'");
        };
        let span = (offset, selected.len());
        Self::Ime(Ime::Preedit(text, Some(span)))
    }

    /// Short name, for debug logging.
    pub fn short_name(&self) -> &'static str {
        match self {
            Self::Keyboard(KeyboardEvent { repeat: true, .. }) => "Keyboard(repeat)",
            Self::Keyboard(..) => "Keyboard",
            Self::Ime(Ime::Disabled) => "Ime::Disabled",
            Self::Ime(Ime::Enabled) => "Ime::Enabled",
            Self::Ime(Ime::Commit(_)) => "Ime::Commit",
            Self::Ime(Ime::Preedit(s, _)) if s.is_empty() => "Ime::Preedit(\"\")",
            Self::Ime(Ime::Preedit(_, _)) => "Ime::Preedit(\"...\")",
            Self::WindowFocusChange(_) => "WindowFocusChange",
        }
    }

    /// Returns `true` if the event is likely to occur every frame.
    ///
    /// Developers should avoid logging during high-density events to avoid
    /// cluttering the console.
    pub fn is_high_density(&self) -> bool {
        match self {
            Self::Keyboard(..) => false,
            Self::Ime(_) => false,
            // Basically every mouse click/scroll event seems to produce a modifier change event.
            Self::WindowFocusChange(_) => false,
        }
    }
}

impl AccessEvent {
    /// Short name, for debug logging.
    ///
    /// Returns the enum variant name.
    pub fn short_name(&self) -> &'static str {
        match self.action {
            accesskit::Action::Click => "Click",
            accesskit::Action::Focus => "Focus",
            accesskit::Action::Blur => "Blur",
            accesskit::Action::Collapse => "Collapse",
            accesskit::Action::Expand => "Expand",
            accesskit::Action::CustomAction => "CustomAction",
            accesskit::Action::Decrement => "Decrement",
            accesskit::Action::Increment => "Increment",
            accesskit::Action::HideTooltip => "HideTooltip",
            accesskit::Action::ShowTooltip => "ShowTooltip",
            accesskit::Action::ReplaceSelectedText => "ReplaceSelectedText",
            accesskit::Action::ScrollBackward => "ScrollBackward",
            accesskit::Action::ScrollDown => "ScrollDown",
            accesskit::Action::ScrollForward => "ScrollForward",
            accesskit::Action::ScrollLeft => "ScrollLeft",
            accesskit::Action::ScrollRight => "ScrollRight",
            accesskit::Action::ScrollUp => "ScrollUp",
            accesskit::Action::ScrollIntoView => "ScrollIntoView",
            accesskit::Action::ScrollToPoint => "ScrollToPoint",
            accesskit::Action::SetScrollOffset => "SetScrollOffset",
            accesskit::Action::SetTextSelection => "SetTextSelection",
            accesskit::Action::SetSequentialFocusNavigationStartingPoint => {
                "SetSequentialFocusNavigationStartingPoint"
            }
            accesskit::Action::SetValue => "SetValue",
            accesskit::Action::ShowContextMenu => "ShowContextMenu",
        }
    }
}

impl Update {
    /// Short name, for debug logging.
    ///
    /// Returns the enum variant name.
    pub fn short_name(&self) -> &str {
        match self {
            Self::WidgetAdded => "WidgetAdded",
            Self::DisabledChanged(_) => "DisabledChanged",
            Self::StashedChanged(_) => "StashedChanged",
            Self::RequestPanToChild(_) => "RequestPanToChild",
            Self::HoveredChanged(_) => "HoveredChanged",
            Self::ChildHoveredChanged(_) => "ChildHoveredChanged",
            Self::FocusChanged(_) => "FocusChanged",
            Self::ChildFocusChanged(_) => "ChildFocusChanged",
        }
    }
}

/// Describes [input method](https://en.wikipedia.org/wiki/Input_method) events.
///
/// Mirrors [`winit::event::Ime`](https://docs.rs/winit/latest/x86_64-unknown-linux-gnu/winit/event/enum.Ime.html).
///
/// This is also called a "composition event".
///
/// Most keypresses using a latin-like keyboard layout simply generate a [`TextEvent::Keyboard`].
/// However, one couldn't possibly have a key for every single unicode character that the user
/// might want to type — so the solution operating systems employ is to allow the user to type these
/// using _a sequence of keypresses_ instead.
///
/// A prominent example of this is accents - many keyboard layouts allow you to first click the
/// "accent key", and then the character you want to apply the accent to. In this case, some
/// platforms will generate the following event sequence:
///
/// ```ignore
/// // Press "`" key
/// Ime::Preedit("`", Some((0, 0)))
/// // Press "E" key
/// Ime::Preedit("", None) // Synthetic event generated by winit to clear preedit.
/// Ime::Commit("é")
/// ```
///
/// Additionally, certain input devices are configured to display a candidate box that allow the
/// user to select the desired character interactively. (To properly position this box, you must use
/// [`RenderRootSignal::ImeMoved`](crate::app::RenderRootSignal::ImeMoved).)
///
/// An example of a keyboard layout which uses candidate boxes is pinyin. On a latin keyboard the
/// following event sequence could be obtained:
///
/// ```ignore
/// // Press "A" key
/// Ime::Preedit("a", Some((1, 1)))
/// // Press "B" key
/// Ime::Preedit("a b", Some((3, 3)))
/// // Press left arrow key
/// Ime::Preedit("a b", Some((1, 1)))
/// // Press space key
/// Ime::Preedit("啊b", Some((3, 3)))
/// // Press space key
/// Ime::Preedit("", None) // Synthetic event generated by winit to clear preedit.
/// Ime::Commit("啊不")
/// ```
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
//#[cfg_attr(feature = "serde", derive(Serialize, Deserialize))]
pub enum Ime {
    /// Notifies when the IME was enabled.
    ///
    /// After getting this event you could receive [`Preedit`][Self::Preedit] and
    /// [`Commit`][Self::Commit] events. You should also start performing IME related requests
    /// like [`RenderRootSignal::ImeMoved`](crate::app::RenderRootSignal::ImeMoved).
    Enabled,

    /// Notifies when a new composing text should be set at the cursor position.
    ///
    /// The value represents a pair of the preedit string and the cursor begin position and end
    /// position. When it's `None`, the cursor should be hidden. When `String` is an empty string
    /// this indicates that preedit was cleared.
    ///
    /// The cursor position is byte-wise indexed.
    Preedit(String, Option<(usize, usize)>),

    /// Notifies when text should be inserted into the editor widget.
    ///
    /// Right before this event winit will send empty [`Self::Preedit`] event.
    Commit(String),

    /// Notifies when the IME was disabled.
    ///
    /// After receiving this event you won't get any more [`Preedit`][Self::Preedit] or
    /// [`Commit`][Self::Commit] events until the next [`Enabled`][Self::Enabled] event.
    Disabled,
}

/// Defines the orientation that a window resize will be performed.
///
/// Mirrors [`winit::window::ResizeDirection`](https://docs.rs/winit/latest/x86_64-unknown-linux-gnu/winit/window/enum.ResizeDirection.html).
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
#[expect(missing_docs, reason = "Copied from winit")]
pub enum ResizeDirection {
    East,
    North,
    NorthEast,
    NorthWest,
    South,
    SouthEast,
    SouthWest,
    West,
}
